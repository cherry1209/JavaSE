package com.bjpowernode.javase.OverrideTest;
/*
 * 多态在实际开发中的作用，以下是主人喂养宠物为例说明多态的作用：
 * 1、分析：主人喂养宠物这个场景要实现需要进行类型的抽象：
 *   - 主人【类】
 *   - 主人可以喂养宠物，所以主人有喂养的这个动作
 *   - 宠物【类】
 *   - 宠物可以吃东西，所以宠物有吃东西的这个动作
 *   
 * 2、面向对象编程的核心：定义好类，然后将类实例化为对象，给一个环境驱使一下，让各个对象之间协作起来形成一个系统。
 * 
 * 3、多态的作用是什么？
 *   降低程序的耦合度，提高程序的扩展力。
 *   能使用多态尽量使用多态。
 *   父类型引用指向子类型对象。
 *   
 * 核心：面向抽象编程，尽量不要面向具体编程。
 *   
 */
public class Test {

	public static void main(String[] args) {
		Master zhangsan = new Master();
		Pet tom = new Dog();
		tom.feed();
		Pet c = new Cat();
		zhangsan.feed(c);
	}

}

另一个类：
package com.bjpowernode.javase.OverrideTest;

//这种方式没有使用java语言当中的多态机制，存在的缺点：Master的拓展力很差，因为只要加一个新的宠物，Master类就需要添加新的方法
/*
public class Master {
	
	//喂养宠物的方法
 public void feed(Cat c){
	 c.eat();
 }
 
 public void feed(Dog d){//面向具体对象的编程
	 d.eat();
 }

}
*/
//Master和Cat、Dog这两个类型的关联程度很强，耦合度很高，扩展力差。

//降低程序的耦合度【解耦合】，提高程序的拓展力【软件开发的一个很重要的目标】
public class Master extends Pet{
	
	//Master主人类面向的是一个抽象的Pet，不再面向具体的宠物
	//提倡：面向抽象编程，不要面向具体编程
	//面向抽象编程的好处是，耦合度底，扩展力强
 public void feed(Pet pet){//Pet pet是一个父类型的引用
	 pet.feed();
 }
 }


另一个类：
package com.bjpowernode.javase.OverrideTest;

public class Pet {
  public void feed(){  
  }
}

另一个类：
package com.bjpowernode.javase.OverrideTest;

public class Dog extends Pet {
 public void feed(){
	 System.out.println("主人喂小狗");
	 
 }
}

另一个类：
package com.bjpowernode.javase.OverrideTest;

public class Cat extends Pet {
	public void feed() {
		 System.out.println("主人喂小猫");
	}
}

